{"ast":null,"code":"var _jsxFileName = \"/Users/park/Documents/react-masterclass2/src/routes/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./api\";\nimport ApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"line\",\n      options: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 41\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chart, \"1zjW8LjbLVySvqo7jR/+Tc6m2Js=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/park/Documents/react-masterclass2/src/routes/Chart.tsx"],"names":["useQuery","fetchCoinHistory","ApexChart","Chart","coinId","isLoading","data"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,aAAvB;AACA,SAAQC,gBAAR,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAiBA,SAASC,KAAT,OAAqC;AAAA;;AAAA,MAAtB;AAACC,IAAAA;AAAD,GAAsB;AACnC,QAAM;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAAoBN,QAAQ,CAAgB,CAAC,OAAD,EAAUI,MAAV,CAAhB,EAAmC,MACnEH,gBAAgB,CAACG,MAAD,CADgB,CAAlC;AAGA,sBACE;AAAA,cACGC,SAAS,GAAG,kBAAH,gBAAwB,QAAC,SAAD;AAAW,MAAA,IAAI,EAAC,MAAhB;AAAuB,MAAA,OAAO;AAA9B;AAAA;AAAA;AAAA;AAAA;AADpC;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GATQF,K;UACmBH,Q;;;KADnBG,K;AAWT,eAAeA,KAAf","sourcesContent":["import {useQuery} from \"react-query\";\nimport {fetchCoinHistory} from \"./api\";\nimport ApexChart from \"react-apexcharts\";\n\ninterface IHistorycal {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface ChartProps {\n  coinId: string;\n}\n\nfunction Chart({coinId}: ChartProps) {\n  const {isLoading, data} = useQuery<IHistorycal[]>([\"ohlcv\", coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n  return (\n    <div>\n      {isLoading ? \"Loading chart...\" : <ApexChart type=\"line\" options/>}\n    </div>\n  )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}