{"ast":null,"code":"var _jsxFileName = \"/Users/park/Documents/react/react-masterclass/src/components/ToDoList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport { atom, useRecoilState } from \"recoil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst toDoState = atom({\n  key: \"toDo\",\n  default: []\n});\n\nfunction ToDoList() {\n  _s();\n\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const {\n    register,\n    handleSubmit,\n    setValue\n  } = useForm();\n\n  const handleValid = _ref => {\n    let {\n      toDo\n    } = _ref;\n    setToDos(oldTodos => [{\n      text: toDo,\n      category: \"TO_DO\"\n    }, ...oldTodos]);\n    setValue(\"toDo\", \"\");\n  };\n\n  console.log(toDos);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To Dos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(handleValid),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"toDo\", {\n          required: \"Please write a To Do\"\n        }),\n        placeholder: \"Write a to do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ToDoList, \"T9EIhkA4ETMkuM/tZs/felGzxhM=\", false, function () {\n  return [useRecoilState, useForm];\n});\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["/Users/park/Documents/react/react-masterclass/src/components/ToDoList.tsx"],"names":["useForm","atom","useRecoilState","toDoState","key","default","ToDoList","toDos","setToDos","register","handleSubmit","setValue","handleValid","toDo","oldTodos","text","category","console","log","required"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,iBAAxB;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,QAArC;;AAYA,MAAMC,SAAS,GAAGF,IAAI,CAAU;AAC9BG,EAAAA,GAAG,EAAE,MADyB;AAE9BC,EAAAA,OAAO,EAAE;AAFqB,CAAV,CAAtB;;AAKA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,cAAc,CAACC,SAAD,CAAxC;AACA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAuCX,OAAO,EAApD;;AACA,QAAMY,WAAW,GAAG,QAAmB;AAAA,QAAlB;AAACC,MAAAA;AAAD,KAAkB;AACrCL,IAAAA,QAAQ,CAACM,QAAQ,IAAI,CAAC;AAACC,MAAAA,IAAI,EAACF,IAAN;AAAYG,MAAAA,QAAQ,EAAC;AAArB,KAAD,EAAgC,GAAGF,QAAnC,CAAb,CAAR;AACAH,IAAAA,QAAQ,CAAC,MAAD,EAAS,EAAT,CAAR;AACD,GAHD;;AAIAM,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACA,sBACI;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAM,MAAA,QAAQ,EAAEG,YAAY,CAACE,WAAD,CAA5B;AAAA,8BACE,sBACQH,QAAQ,CAAC,MAAD,EAAS;AACnBU,UAAAA,QAAQ,EAAE;AADS,SAAT,CADhB;AAII,QAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAYE;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBD;;GA1BQb,Q;UACmBJ,c,EACmBF,O;;;KAFtCM,Q;AA4BT,eAAeA,QAAf","sourcesContent":["import { useForm } from \"react-hook-form\";\nimport { atom, useRecoilState } from \"recoil\";\n\ninterface IForm {\n  toDo: string;\n}\n\ninterface IToDo {\n  text: string;\n  category: \"TO_DO\" | \"DOING\" | \"DONE\";\n}\n\n\nconst toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nfunction ToDoList() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({toDo}: IForm) => {\n    setToDos(oldTodos => [{text:toDo, category:\"TO_DO\"}, ...oldTodos])\n    setValue(\"toDo\", \"\");\n  };\n  console.log(toDos);\n  return (\n      <div>\n        <h1>To Dos</h1>\n        <hr />\n        <form onSubmit={handleSubmit(handleValid)}>\n          <input\n              {...register(\"toDo\", {\n                required: \"Please write a To Do\",\n              })}\n              placeholder=\"Write a to do\"\n          />\n          <button>Add</button>\n        </form>\n        <ul>\n         \n        </ul>\n      </div>\n  );\n}\n\nexport default ToDoList;"]},"metadata":{},"sourceType":"module"}