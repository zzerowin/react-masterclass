{"ast":null,"code":"var _jsxFileName = \"/Users/park/Documents/react-masterclass2/src/routes/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./api\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  var _data$map;\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId), {\n    refetchInterval: 10000\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      type: \"line\",\n      series: [{\n        name: \"Price\",\n        data: (_data$map = data === null || data === void 0 ? void 0 : data.map(price => price.close)) !== null && _data$map !== void 0 ? _data$map : []\n      }],\n      options: {\n        theme: {\n          mode: \"dark\"\n        },\n        chart: {\n          height: 300,\n          width: 500,\n          toolbar: {\n            show: false\n          },\n          background: \"transparent\"\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 4\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false\n          },\n          type: \"datetime\",\n          categories: data === null || data === void 0 ? void 0 : data.map(price => price.time_close)\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            gradientToColors: [\"#ebf1fa\"],\n            stops: [0, 100]\n          }\n        },\n        colors: [\"#4177d0\"],\n        tooltip: {\n          y: {\n            formatter: value => `$ ${value.toFixed(2)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/park/Documents/react-masterclass2/src/routes/Chart.tsx"],"names":["useQuery","fetchCoinHistory","ReactApexChart","Chart","coinId","isLoading","data","refetchInterval","name","map","price","close","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","type","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,aAAvB;AACA,SAAQC,gBAAR,QAA+B,OAA/B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAkBA,SAASC,KAAT,OAAqC;AAAA;;AAAA;;AAAA,MAAtB;AAACC,IAAAA;AAAD,GAAsB;AACnC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAsBN,QAAQ,CAAgB,CAAC,OAAD,EAAUI,MAAV,CAAhB,EAAmC,MACrEH,gBAAgB,CAACG,MAAD,CADkB,EAElC;AACEG,IAAAA,eAAe,EAAE;AADnB,GAFkC,CAApC;AAOA,sBACE;AAAA,cACGF,SAAS,GACR,kBADQ,gBAGR,QAAC,cAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,MAAM,EAAE,CACN;AACEG,QAAAA,IAAI,EAAE,OADR;AAEEF,QAAAA,IAAI,eAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG,GAAN,CAAUC,KAAK,IAAIA,KAAK,CAACC,KAAzB,CAAF,iDAAqC;AAF3C,OADM,CAFV;AAQE,MAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AADD,SADA;AAIPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,GADH;AAELC,UAAAA,KAAK,EAAE,GAFF;AAGLC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE;AADC,WAHJ;AAMLC,UAAAA,UAAU,EAAE;AANP,SAJA;AAYPC,QAAAA,IAAI,EAAE;AAACF,UAAAA,IAAI,EAAE;AAAP,SAZC;AAaPG,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,QADD;AAENN,UAAAA,KAAK,EAAE;AAFD,SAbD;AAiBPO,QAAAA,KAAK,EAAE;AACLL,UAAAA,IAAI,EAAE;AADD,SAjBA;AAoBPM,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE;AAACP,YAAAA,IAAI,EAAE;AAAP,WADP;AAELQ,UAAAA,SAAS,EAAE;AAACR,YAAAA,IAAI,EAAE;AAAP,WAFN;AAGLS,UAAAA,MAAM,EAAE;AAACT,YAAAA,IAAI,EAAE;AAAP,WAHH;AAILU,UAAAA,IAAI,EAAE,UAJD;AAKLC,UAAAA,UAAU,EAAEvB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG,GAAN,CAAWC,KAAD,IAAWA,KAAK,CAACoB,UAA3B;AALP,SApBA;AA2BPC,QAAAA,IAAI,EAAE;AACJH,UAAAA,IAAI,EAAE,UADF;AAEJI,UAAAA,QAAQ,EAAE;AAACC,YAAAA,gBAAgB,EAAE,CAAC,SAAD,CAAnB;AAAgCC,YAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,GAAJ;AAAvC;AAFN,SA3BC;AA+BPC,QAAAA,MAAM,EAAE,CAAC,SAAD,CA/BD;AAgCPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,CAAC,EAAE;AACDC,YAAAA,SAAS,EAAGC,KAAD,IAAY,KAAIA,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AAD3C;AADI;AAhCF;AARX;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAuDD;;GA/DQrC,K;UACqBH,Q;;;KADrBG,K;AAiET,eAAeA,KAAf","sourcesContent":["import {useQuery} from \"react-query\";\nimport {fetchCoinHistory} from \"./api\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { Helmet } from \"react-helmet-async\";\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface ChartProps {\n  coinId: string;\n}\n\nfunction Chart({coinId}: ChartProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () =>\n    fetchCoinHistory(coinId),\n    {\n      refetchInterval: 10000,\n    }\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ReactApexChart\n          type=\"line\"\n          series={[\n            {\n              name: \"Price\",\n              data: data?.map(price => price.close) ?? [],\n            },\n          ]}\n          options={{\n            theme: {\n              mode: \"dark\",\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: \"transparent\",\n            },\n            grid: {show: false},\n            stroke: {\n              curve: \"smooth\",\n              width: 4,\n            },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              axisBorder: {show: false},\n              axisTicks: {show: false},\n              labels: {show: false},\n              type: \"datetime\",\n              categories: data?.map((price) => price.time_close)\n          },\n            fill: {\n              type: \"gradient\",\n              gradient: {gradientToColors: [\"#ebf1fa\"], stops: [0, 100]},\n            },\n            colors: [\"#4177d0\"],\n            tooltip: {\n              y: {\n                formatter: (value) => `$ ${value.toFixed(2)}`,\n              }\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}